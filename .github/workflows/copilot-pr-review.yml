name: Copilot PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  copilot-review:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get PR diff
        id: pr-diff
        run: |
          # Get PR number from context
          PR_NUMBER="${{ github.event.pull_request.number }}"
          echo "Analyzing PR #${PR_NUMBER}"
          
          # Fetch the PR head using simpler, more reliable approach
          git fetch origin pull/${PR_NUMBER}/head:pr-${PR_NUMBER}
          git diff origin/${{ github.base_ref }}...pr-${PR_NUMBER} > pr-diff.txt
          
          # Debug: Show diff file size
          ls -la pr-diff.txt
          
          # Check if diff exists and is not empty
          if [ ! -s pr-diff.txt ]; then
            echo "No changes detected in PR"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected - diff size: $(wc -l < pr-diff.txt) lines"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ github.token }}
      
      - name: Analyze Code Changes with AI
        if: steps.pr-diff.outputs.has_changes == 'true'
        id: code-analysis
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          # Get actual diff content for analysis
          git diff origin/${{ github.base_ref }}...pr-${PR_NUMBER} > full-diff.txt
          
          # Get changed files with their content
          git diff --name-only origin/${{ github.base_ref }}...pr-${PR_NUMBER} > changed-files.txt
          
          # Analyze each changed file for specific improvements
          echo "## 🤖 AI Code Analysis" > analysis-output.md
          echo "" >> analysis-output.md
          
          while IFS= read -r file; do
            if [[ -f "$file" ]]; then
              echo "### 📄 \`$file\`" >> analysis-output.md
              echo "" >> analysis-output.md
              
              # Create a safe filename for the diff (replace / with -)
              safe_filename=$(echo "$file" | tr '/' '-' | tr '.' '_')
              diff_file="diff-${safe_filename}.txt"
              
              # Get the actual changes for this file
              git diff origin/${{ github.base_ref }}...pr-${PR_NUMBER} -- "$file" > "$diff_file"
              
              # Analyze based on file type and actual content
              case "$file" in
                *.css|*.scss|*.sass)
                  echo "**CSS Analysis:**" >> analysis-output.md
                  # Check for specific CSS patterns in the diff
                  if grep -q "color:" "$diff_file" 2>/dev/null; then
                    echo "- 🎨 Color changes detected - consider using CSS custom properties for consistency" >> analysis-output.md
                  fi
                  if grep -q "px\|em\|rem" "$diff_file" 2>/dev/null; then
                    echo "- 📱 Unit usage found - consider \`clamp()\` for responsive values" >> analysis-output.md
                  fi
                  if grep -q "float\|position: absolute" "$diff_file" 2>/dev/null; then
                    echo "- 🏗️ Layout properties detected - consider modern CSS Grid/Flexbox" >> analysis-output.md
                  fi
                  ;;
                *.html|*.htm)
                  echo "**HTML Analysis:**" >> analysis-output.md
                  if grep -q "<img" "$diff_file" 2>/dev/null; then
                    echo "- 🖼️ Images detected - add \`alt\` attributes and consider \`loading=\"lazy\"\`" >> analysis-output.md
                  fi
                  if grep -q "<a " "$diff_file" 2>/dev/null; then
                    echo "- 🔗 Links detected - ensure proper \`aria-label\` for accessibility" >> analysis-output.md
                  fi
                  if grep -q "<button\|onclick" "$diff_file" 2>/dev/null; then
                    echo "- 🎯 Interactive elements - ensure keyboard navigation support" >> analysis-output.md
                  fi
                  ;;
                *.js|*.ts)
                  echo "**JavaScript Analysis:**" >> analysis-output.md
                  if grep -q "var " "$diff_file" 2>/dev/null; then
                    echo "- 🔧 \`var\` usage found - consider \`const\`/\`let\` for better scoping" >> analysis-output.md
                  fi
                  if grep -q "\.innerHTML" "$diff_file" 2>/dev/null; then
                    echo "- 🔒 \`innerHTML\` usage - validate input to prevent XSS attacks" >> analysis-output.md
                  fi
                  if grep -q "addEventListener" "$diff_file" 2>/dev/null; then
                    echo "- ♿ Event listeners added - ensure keyboard accessibility" >> analysis-output.md
                  fi
                  ;;
                *.md)
                  echo "**Markdown Analysis:**" >> analysis-output.md
                  if grep -q "^#" "$diff_file" 2>/dev/null; then
                    echo "- 📚 Heading structure - ensure proper hierarchy (h1 → h2 → h3)" >> analysis-output.md
                  fi
                  if grep -q "!\[.*\](" "$diff_file" 2>/dev/null; then
                    echo "- 🖼️ Images added - ensure descriptive alt text for accessibility" >> analysis-output.md
                  fi
                  ;;
                *.yml|*.yaml|_config.yml)
                  echo "**Configuration Analysis:**" >> analysis-output.md
                  if grep -q "url:\|baseurl:" "$diff_file" 2>/dev/null; then
                    echo "- 🌐 URL configuration changed - verify for production deployment" >> analysis-output.md
                  fi
                  if grep -q "plugins:\|gems:" "$diff_file" 2>/dev/null; then
                    echo "- 🔌 Plugin configuration - ensure compatibility with GitHub Pages" >> analysis-output.md
                  fi
                  ;;
              esac
              echo "" >> analysis-output.md
            fi
          done < changed-files.txt
          
          echo "code_analysis_complete=true" >> $GITHUB_OUTPUT
      
      - name: Generate Improvement Suggestions
        if: steps.code-analysis.outputs.code_analysis_complete == 'true'
        id: suggestions
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          # Create actionable improvement suggestions
          cat > suggestions.md << 'EOF'
          
          ### 💡 Suggested Improvements
          
          Based on the code analysis, here are specific improvements you can make:
          
          EOF
          
          # Check for common improvement opportunities in the actual diff
          if grep -q "color:" full-diff.txt 2>/dev/null; then
            cat >> suggestions.md << 'EOF'
          #### 🎨 CSS Color Consistency
          ```css
          /* Consider using CSS custom properties */
          :root {
            --primary-color: #your-color;
            --secondary-color: #your-color;
          }
          
          /* Instead of hardcoded colors */
          .element {
            color: var(--primary-color);
          }
          ```
          
          EOF
          fi
          
          if grep -q "<img" full-diff.txt 2>/dev/null; then
            cat >> suggestions.md << 'EOF'
          #### 🖼️ Image Accessibility
          ```html
          <!-- Add descriptive alt text and lazy loading -->
          <img src="image.jpg" 
               alt="Descriptive text about the image content" 
               loading="lazy" 
               width="800" 
               height="600">
          ```
          
          EOF
          fi
          
          # Track if we have any auto-fixable issues
          AUTO_FIXES_AVAILABLE=false
          
          if grep -q "var " full-diff.txt 2>/dev/null; then
            AUTO_FIXES_AVAILABLE=true
            cat >> suggestions.md << 'EOF'
          #### 🔧 Modern JavaScript (Auto-fixable ✨)
          ```javascript
          // Replace var with const/let
          const unchangingValue = "value";
          let changingValue = "initial";
          
          // Use arrow functions for cleaner syntax
          const handleClick = (event) => {
            // Handle click
          };
          ```
          🤖 **Auto-fix available**: Comment `@github-actions apply-auto-fixes` to automatically apply these changes.
          
          EOF
          fi
          
          if grep -q "\.innerHTML" full-diff.txt 2>/dev/null; then
            cat >> suggestions.md << 'EOF'
          #### � Security Improvement
          ```javascript
          // Safer DOM manipulation
          const safeElement = document.createElement('div');
          safeElement.textContent = userInput; // Prevents XSS
          
          // Or use DOMPurify for HTML content
          element.innerHTML = DOMPurify.sanitize(htmlContent);
          ```
          
          EOF
          fi
          
          # Add general best practices
          cat >> suggestions.md << 'EOF'
          
          #### 📋 Quick Wins
          - Run `npm audit` or `bundle audit` to check for security vulnerabilities
          - Consider adding/updating unit tests for new functionality
          - Validate HTML with W3C validator for semantic correctness
          - Test responsive design on different screen sizes
          - Verify keyboard navigation for accessibility
          
          ---
          *� These suggestions are based on your actual code changes. Review and apply what makes sense for your project.*
          EOF
          
          echo "suggestions_ready=true" >> $GITHUB_OUTPUT
          echo "auto_fixes_available=$AUTO_FIXES_AVAILABLE" >> $GITHUB_OUTPUT
      
      - name: Prepare Auto-fix Suggestions
        if: steps.suggestions.outputs.auto_fixes_available == 'true'
        id: auto-fixes
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          FIXES_PREPARED=false
          
          # Prepare preview of automatic fixes without applying them
          echo "## 🤖 Proposed Auto-fixes" > auto-fix-preview.md
          echo "" >> auto-fix-preview.md
          echo "The following automatic fixes are available. **Review carefully before applying:**" >> auto-fix-preview.md
          echo "" >> auto-fix-preview.md
          
          while IFS= read -r file; do
            if [[ "$file" == *.js ]] && [[ -f "$file" ]]; then
              echo "🔧 Analyzing $file for auto-fixes..."
              
              # Check for var usage and show what would change
              if grep -q "var " "$file"; then
                echo "### � \`$file\`" >> auto-fix-preview.md
                echo "" >> auto-fix-preview.md
                echo "**Proposed changes:**" >> auto-fix-preview.md
                echo '```javascript' >> auto-fix-preview.md
                
                # Show before/after for var declarations
                grep -n "var " "$file" | head -5 | while read -r line; do
                  line_num=$(echo "$line" | cut -d: -f1)
                  original=$(echo "$line" | cut -d: -f2-)
                  # Simple preview of what would change
                  fixed=$(echo "$original" | perl -pe 's/var\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*=\s*(["\047][^"\047]*["\047]|[0-9]+|true|false|null)\s*;/const $1 = $2;/g; s/for\s*\(\s*var\s+/for (let /g;')
                  echo "// Line $line_num:" >> auto-fix-preview.md
                  echo "- $original" >> auto-fix-preview.md
                  echo "+ $fixed" >> auto-fix-preview.md
                  echo "" >> auto-fix-preview.md
                done
                
                echo '```' >> auto-fix-preview.md
                echo "" >> auto-fix-preview.md
                FIXES_PREPARED=true
              fi
            fi
          done < changed-files.txt
          
          if [[ "$FIXES_PREPARED" == "true" ]]; then
            echo "" >> auto-fix-preview.md
            echo "### ⚠️ Important Notes" >> auto-fix-preview.md
            echo "- These are conservative automatic fixes" >> auto-fix-preview.md
            echo "- Always test your code after applying auto-fixes" >> auto-fix-preview.md
            echo "- Original code will be preserved in git history" >> auto-fix-preview.md
            echo "" >> auto-fix-preview.md
            echo "### 🚀 How to Apply" >> auto-fix-preview.md
            echo "To apply these fixes:" >> auto-fix-preview.md
            echo "1. **Comment**: \`@github-actions apply-auto-fixes\` on this PR" >> auto-fix-preview.md
            echo "2. **Manual**: Copy the changes above to your local branch" >> auto-fix-preview.md
            echo "3. **Workflow**: Run the \"Apply Auto-fixes\" workflow manually from the Actions tab" >> auto-fix-preview.md
            
            echo "auto_fixes_prepared=true" >> $GITHUB_OUTPUT
          else
            echo "auto_fixes_prepared=false" >> $GITHUB_OUTPUT
            echo "## 🤖 Auto-fix Analysis" > auto-fix-preview.md
            echo "" >> auto-fix-preview.md
            echo "ℹ️  No auto-fixable issues found in this PR's changed files." >> auto-fix-preview.md
            echo "" >> auto-fix-preview.md
            echo "The code follows modern JavaScript practices or doesn't contain patterns we can safely auto-fix." >> auto-fix-preview.md
          fi
      
      - name: Generate Final Review
        if: steps.code-analysis.outputs.code_analysis_complete == 'true'
        id: final-review
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          DIFF_LINES=$(wc -l < pr-diff.txt)
          FILES_CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...pr-${PR_NUMBER} | wc -l)
          
          # Combine analysis and suggestions into final review
          cat > review-output.md << EOF
          ## 🤖 AI-Powered Code Review
          
          **Summary:** This PR contains ${FILES_CHANGED} file(s) with ${DIFF_LINES} lines of changes.
          
          ### Files Modified
          $(git diff --name-only origin/${{ github.base_ref }}...pr-${PR_NUMBER} | sed 's/^/- /')
          
          EOF
          
          # Add detailed code analysis if available
          if [ -f analysis-output.md ]; then
            cat analysis-output.md >> review-output.md
            echo "" >> review-output.md
          fi
          
          # Add actionable suggestions if available  
          if [ -f suggestions.md ]; then
            cat suggestions.md >> review-output.md
            echo "" >> review-output.md
          fi
          
          # Add auto-fix preview if available
          if [ -f auto-fix-preview.md ] && [[ "${{ steps.suggestions.outputs.auto_fixes_available }}" == "true" ]]; then
            echo "" >> review-output.md
            cat auto-fix-preview.md >> review-output.md
            echo "" >> review-output.md
          fi
          
          # Add next steps
          cat >> review-output.md << 'EOF'
          
          ### 🚀 Next Steps
          1. 👀 Review the specific suggestions above
          2. 🛠️ Apply relevant code improvements
          3. 🧪 Test changes locally
          4. ✅ Request human review when ready
          
          ---
          EOF
          
          # Add timestamp
          echo "*AI review generated at $(date)*" >> review-output.md
          
          echo "final_review_ready=true" >> $GITHUB_OUTPUT
      
      - name: Post Review Comment
        if: steps.final-review.outputs.final_review_ready == 'true'
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body-file review-output.md
        env:
          GH_TOKEN: ${{ github.token }}
      
      - name: Update PR with Labels  
        if: steps.final-review.outputs.final_review_ready == 'true'
        continue-on-error: true
        run: |
          # Try to add an automated-review label if it exists
          gh pr edit ${{ github.event.pull_request.number }} --add-label "ai-reviewed" 2>/dev/null || echo "Label 'ai-reviewed' does not exist, skipping"
        env:
          GH_TOKEN: ${{ github.token }}
