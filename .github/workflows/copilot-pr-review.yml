name: Copilot PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  copilot-review:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get PR diff
        id: pr-diff
        run: |
          # Get PR number from context
          PR_NUMBER="${{ github.event.pull_request.number }}"
          echo "Analyzing PR #${PR_NUMBER}"
          
          # Fetch the PR head using simpler, more reliable approach
          git fetch origin pull/${PR_NUMBER}/head:pr-${PR_NUMBER}
          git diff origin/${{ github.base_ref }}...pr-${PR_NUMBER} > pr-diff.txt
          
          # Debug: Show diff file size
          ls -la pr-diff.txt
          
          # Check if diff exists and is not empty
          if [ ! -s pr-diff.txt ]; then
            echo "No changes detected in PR"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected - diff size: $(wc -l < pr-diff.txt) lines"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ github.token }}
      
      - name: Analyze File Changes for Best Practices
        if: steps.pr-diff.outputs.has_changes == 'true'
        id: file-analysis
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          # Get list of changed files
          git diff --name-only origin/${{ github.base_ref }}...pr-${PR_NUMBER} > changed-files.txt
          
          # Categorize files by type for specific suggestions
          CSS_FILES=$(grep -E '\.(css|scss|sass)$' changed-files.txt || echo "")
          HTML_FILES=$(grep -E '\.(html|htm)$' changed-files.txt || echo "")  
          JS_FILES=$(grep -E '\.(js|ts)$' changed-files.txt || echo "")
          JEKYLL_FILES=$(grep -E '\.(md|yml|yaml|rb)$|_config\.|Gemfile' changed-files.txt || echo "")
          CONFIG_FILES=$(grep -E '\.(json|toml|xml)$|package\.json|\.github' changed-files.txt || echo "")
          
          # Set outputs for conditional suggestions
          [ ! -z "$CSS_FILES" ] && echo "has_css=true" >> $GITHUB_OUTPUT
          [ ! -z "$HTML_FILES" ] && echo "has_html=true" >> $GITHUB_OUTPUT
          [ ! -z "$JS_FILES" ] && echo "has_js=true" >> $GITHUB_OUTPUT
          [ ! -z "$JEKYLL_FILES" ] && echo "has_jekyll=true" >> $GITHUB_OUTPUT
          [ ! -z "$CONFIG_FILES" ] && echo "has_config=true" >> $GITHUB_OUTPUT
          
          echo "analysis_complete=true" >> $GITHUB_OUTPUT
      
      - name: Generate AI Review Summary
        if: steps.pr-diff.outputs.has_changes == 'true'
        id: ai-review
        run: |
          # Create a more comprehensive review based on file changes
          DIFF_LINES=$(wc -l < pr-diff.txt)
          FILES_CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...pr-${PR_NUMBER} | wc -l)
          
          cat > review-output.md << EOF
          ## 🤖 Automated PR Review
          
          **Summary:** This PR contains ${FILES_CHANGED} file(s) with ${DIFF_LINES} lines of changes.
          
          ### Files Modified
          $(git diff --name-only origin/${{ github.base_ref }}...pr-${PR_NUMBER} | sed 's/^/- /')
          
          ### Analysis
          - ✅ **Change Detection**: Successfully identified modifications
          - 📊 **Scope**: $([ ${FILES_CHANGED} -lt 5 ] && echo "Small change" || echo "Medium/Large change")
          - 🔍 **Review Recommended**: Manual review by maintainers suggested
          
          ### Automated Checks
          - Configuration files: $(git diff --name-only origin/${{ github.base_ref }}...pr-${PR_NUMBER} | grep -E '\.(yml|yaml|json|toml)$' | wc -l) modified
          - Documentation: $(git diff --name-only origin/${{ github.base_ref }}...pr-${PR_NUMBER} | grep -E '\.(md|txt)$' | wc -l) modified  
          - Code files: $(git diff --name-only origin/${{ github.base_ref }}...pr-${PR_NUMBER} | grep -E '\.(js|ts|html|css|rb|py)$' | wc -l) modified
          EOF
          
          # Add best practice suggestions based on file types
          if [[ "${{ steps.file-analysis.outputs.has_css }}" == "true" || "${{ steps.file-analysis.outputs.has_html }}" == "true" || "${{ steps.file-analysis.outputs.has_js }}" == "true" || "${{ steps.file-analysis.outputs.has_jekyll }}" == "true" || "${{ steps.file-analysis.outputs.has_config }}" == "true" ]]; then
            cat >> review-output.md << 'EOF'
          
          ### 🔍 Best Practice Suggestions
          EOF
          fi
          
          # CSS suggestions
          if [[ "${{ steps.file-analysis.outputs.has_css }}" == "true" ]]; then
            cat >> review-output.md << 'EOF'
          
          #### 🎨 CSS/Styling Files
          - **Performance**: Consider using `contain: layout style` for components to improve rendering performance
          - **Modern CSS**: Use CSS custom properties (variables) for consistent theming  
          - **Responsive**: Implement fluid typography with `clamp()` for better responsive design
          - **Accessibility**: Ensure sufficient color contrast ratios (WCAG AA: 4.5:1 for normal text)
          EOF
          fi
          
          # HTML suggestions
          if [[ "${{ steps.file-analysis.outputs.has_html }}" == "true" ]]; then
            cat >> review-output.md << 'EOF'
          
          #### 🏗️ HTML Structure Files  
          - **Accessibility**: Add `aria-label` attributes to interactive elements for screen readers
          - **SEO**: Include proper `meta` tags (description, viewport, Open Graph)
          - **Performance**: Use `loading="lazy"` for images below the fold
          - **Semantic HTML**: Use appropriate semantic elements (`<main>`, `<section>`, `<article>`)
          EOF
          fi
          
          # JavaScript suggestions
          if [[ "${{ steps.file-analysis.outputs.has_js }}" == "true" ]]; then
            cat >> review-output.md << 'EOF'
          
          #### ⚡ JavaScript Files
          - **Performance**: Use `const` and `let` instead of `var` for better scoping
          - **Modern JS**: Consider using async/await for better promise handling
          - **Accessibility**: Ensure keyboard navigation support for interactive elements
          - **Security**: Validate and sanitize any user inputs to prevent XSS attacks
          EOF
          fi
          
          # Jekyll suggestions
          if [[ "${{ steps.file-analysis.outputs.has_jekyll }}" == "true" ]]; then
            cat >> review-output.md << 'EOF'
          
          #### 💎 Jekyll/Ruby Files
          - **Performance**: Use `\{{ '/path' | relative_url \}}` for all internal links and assets
          - **SEO**: Implement proper front matter with title, description, and meta tags  
          - **Liquid Templates**: Use `\{% unless %\}` and `\{% if %\}` efficiently to avoid unnecessary processing
          - **Security**: Never expose sensitive data in front matter or public repositories
          EOF
          fi
          
          # Configuration suggestions
          if [[ "${{ steps.file-analysis.outputs.has_config }}" == "true" ]]; then
            cat >> review-output.md << 'EOF'
          
          #### ⚙️ Configuration Files
          - **Security**: Never commit secrets, API keys, or sensitive credentials
          - **Documentation**: Add comments explaining complex configuration options
          - **Validation**: Use schema validation where available (JSON Schema, etc.)
          - **Maintenance**: Keep dependencies updated and remove unused configurations
          EOF
          fi
          
          # Add closing sections
          cat >> review-output.md << 'EOF'
          
          ### Next Steps
          1. 👀 Review changes manually
          2. 🧪 Test functionality locally  
          3. ✅ Approve if changes look good
          4. 🚀 Merge when ready
          
          ---
          EOF
          
          # Add timestamp with proper command substitution
          echo "*Automated review with best practices generated at $(date)*" >> review-output.md
          
          echo "review_created=true" >> $GITHUB_OUTPUT
      
      - name: Post Review Comment
        if: steps.ai-review.outputs.review_created == 'true'
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body-file review-output.md
        env:
          GH_TOKEN: ${{ github.token }}
      
      - name: Update PR with Labels  
        if: steps.ai-review.outputs.review_created == 'true'
        continue-on-error: true
        run: |
          # Try to add an automated-review label if it exists
          gh pr edit ${{ github.event.pull_request.number }} --add-label "automated-review" 2>/dev/null || echo "Label 'automated-review' does not exist, skipping"
        env:
          GH_TOKEN: ${{ github.token }}
